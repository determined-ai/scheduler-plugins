// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: vipu-protos-1.18.0/vipuuser.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// List the configured partitions.
	ListPartitions(ctx context.Context, in *ListPartitionsRequest, opts ...grpc.CallOption) (*ListPartitionsReply, error)
	// List the attributes of the users IPUs
	ListIPUAttributes(ctx context.Context, in *ListIPUAttributesRequest, opts ...grpc.CallOption) (*ListIPUAttributesReply, error)
	// Create a partition
	CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*CreatePartitionReply, error)
	// Remove a partition
	RemovePartition(ctx context.Context, in *RemovePartitionRequest, opts ...grpc.CallOption) (*RemovePartitionReply, error)
	// Force a reset of the partition back to an initial state.
	ResetPartition(ctx context.Context, in *ResetPartitionRequest, opts ...grpc.CallOption) (*ResetPartitionReply, error)
	// Get IPUoF configurations for a configured partition
	GetPartitionIpuofConfig(ctx context.Context, in *GetPartitionIpuofConfigRequest, opts ...grpc.CallOption) (*GetPartitionIpuofConfigReply, error)
	// Get status of a partition.
	GetPartitionStatus(ctx context.Context, in *GetPartitionStatusRequest, opts ...grpc.CallOption) (*GetPartitionStatusReply, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) ListPartitions(ctx context.Context, in *ListPartitionsRequest, opts ...grpc.CallOption) (*ListPartitionsReply, error) {
	out := new(ListPartitionsReply)
	err := c.cc.Invoke(ctx, "/virmgrpc.UserService/ListPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListIPUAttributes(ctx context.Context, in *ListIPUAttributesRequest, opts ...grpc.CallOption) (*ListIPUAttributesReply, error) {
	out := new(ListIPUAttributesReply)
	err := c.cc.Invoke(ctx, "/virmgrpc.UserService/ListIPUAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*CreatePartitionReply, error) {
	out := new(CreatePartitionReply)
	err := c.cc.Invoke(ctx, "/virmgrpc.UserService/CreatePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemovePartition(ctx context.Context, in *RemovePartitionRequest, opts ...grpc.CallOption) (*RemovePartitionReply, error) {
	out := new(RemovePartitionReply)
	err := c.cc.Invoke(ctx, "/virmgrpc.UserService/RemovePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResetPartition(ctx context.Context, in *ResetPartitionRequest, opts ...grpc.CallOption) (*ResetPartitionReply, error) {
	out := new(ResetPartitionReply)
	err := c.cc.Invoke(ctx, "/virmgrpc.UserService/ResetPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPartitionIpuofConfig(ctx context.Context, in *GetPartitionIpuofConfigRequest, opts ...grpc.CallOption) (*GetPartitionIpuofConfigReply, error) {
	out := new(GetPartitionIpuofConfigReply)
	err := c.cc.Invoke(ctx, "/virmgrpc.UserService/GetPartitionIpuofConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPartitionStatus(ctx context.Context, in *GetPartitionStatusRequest, opts ...grpc.CallOption) (*GetPartitionStatusReply, error) {
	out := new(GetPartitionStatusReply)
	err := c.cc.Invoke(ctx, "/virmgrpc.UserService/GetPartitionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// List the configured partitions.
	ListPartitions(context.Context, *ListPartitionsRequest) (*ListPartitionsReply, error)
	// List the attributes of the users IPUs
	ListIPUAttributes(context.Context, *ListIPUAttributesRequest) (*ListIPUAttributesReply, error)
	// Create a partition
	CreatePartition(context.Context, *CreatePartitionRequest) (*CreatePartitionReply, error)
	// Remove a partition
	RemovePartition(context.Context, *RemovePartitionRequest) (*RemovePartitionReply, error)
	// Force a reset of the partition back to an initial state.
	ResetPartition(context.Context, *ResetPartitionRequest) (*ResetPartitionReply, error)
	// Get IPUoF configurations for a configured partition
	GetPartitionIpuofConfig(context.Context, *GetPartitionIpuofConfigRequest) (*GetPartitionIpuofConfigReply, error)
	// Get status of a partition.
	GetPartitionStatus(context.Context, *GetPartitionStatusRequest) (*GetPartitionStatusReply, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) ListPartitions(context.Context, *ListPartitionsRequest) (*ListPartitionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartitions not implemented")
}
func (UnimplementedUserServiceServer) ListIPUAttributes(context.Context, *ListIPUAttributesRequest) (*ListIPUAttributesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIPUAttributes not implemented")
}
func (UnimplementedUserServiceServer) CreatePartition(context.Context, *CreatePartitionRequest) (*CreatePartitionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (UnimplementedUserServiceServer) RemovePartition(context.Context, *RemovePartitionRequest) (*RemovePartitionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePartition not implemented")
}
func (UnimplementedUserServiceServer) ResetPartition(context.Context, *ResetPartitionRequest) (*ResetPartitionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPartition not implemented")
}
func (UnimplementedUserServiceServer) GetPartitionIpuofConfig(context.Context, *GetPartitionIpuofConfigRequest) (*GetPartitionIpuofConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionIpuofConfig not implemented")
}
func (UnimplementedUserServiceServer) GetPartitionStatus(context.Context, *GetPartitionStatusRequest) (*GetPartitionStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionStatus not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_ListPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virmgrpc.UserService/ListPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListPartitions(ctx, req.(*ListPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListIPUAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIPUAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListIPUAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virmgrpc.UserService/ListIPUAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListIPUAttributes(ctx, req.(*ListIPUAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virmgrpc.UserService/CreatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreatePartition(ctx, req.(*CreatePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemovePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemovePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virmgrpc.UserService/RemovePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemovePartition(ctx, req.(*RemovePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResetPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResetPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virmgrpc.UserService/ResetPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResetPartition(ctx, req.(*ResetPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetPartitionIpuofConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionIpuofConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetPartitionIpuofConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virmgrpc.UserService/GetPartitionIpuofConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetPartitionIpuofConfig(ctx, req.(*GetPartitionIpuofConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetPartitionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetPartitionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virmgrpc.UserService/GetPartitionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetPartitionStatus(ctx, req.(*GetPartitionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "virmgrpc.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPartitions",
			Handler:    _UserService_ListPartitions_Handler,
		},
		{
			MethodName: "ListIPUAttributes",
			Handler:    _UserService_ListIPUAttributes_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _UserService_CreatePartition_Handler,
		},
		{
			MethodName: "RemovePartition",
			Handler:    _UserService_RemovePartition_Handler,
		},
		{
			MethodName: "ResetPartition",
			Handler:    _UserService_ResetPartition_Handler,
		},
		{
			MethodName: "GetPartitionIpuofConfig",
			Handler:    _UserService_GetPartitionIpuofConfig_Handler,
		},
		{
			MethodName: "GetPartitionStatus",
			Handler:    _UserService_GetPartitionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vipu-protos-1.18.0/vipuuser.proto",
}
