// Copyright (c) 2020 Graphcore Ltd. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: vipu-protos-1.18.0/vipuuser.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpuLinkRoutingType int32

const (
	IpuLinkRoutingType_IRT_UNDEFINED IpuLinkRoutingType = 0
	// DNC - Default Configuration
	IpuLinkRoutingType_IRT_DNC IpuLinkRoutingType = 1
	// SWNC - Sliding Window Configuration
	IpuLinkRoutingType_IRT_SWNC IpuLinkRoutingType = 2
	// BTNC - Barley Twist Configuration
	IpuLinkRoutingType_IRT_BTNC IpuLinkRoutingType = 3
	// RINGSWNC - Sliding Window Configuration with loop links enabled
	IpuLinkRoutingType_IRT_RINGSWNC IpuLinkRoutingType = 4
)

// Enum value maps for IpuLinkRoutingType.
var (
	IpuLinkRoutingType_name = map[int32]string{
		0: "IRT_UNDEFINED",
		1: "IRT_DNC",
		2: "IRT_SWNC",
		3: "IRT_BTNC",
		4: "IRT_RINGSWNC",
	}
	IpuLinkRoutingType_value = map[string]int32{
		"IRT_UNDEFINED": 0,
		"IRT_DNC":       1,
		"IRT_SWNC":      2,
		"IRT_BTNC":      3,
		"IRT_RINGSWNC":  4,
	}
)

func (x IpuLinkRoutingType) Enum() *IpuLinkRoutingType {
	p := new(IpuLinkRoutingType)
	*p = x
	return p
}

func (x IpuLinkRoutingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpuLinkRoutingType) Descriptor() protoreflect.EnumDescriptor {
	return file_vipu_protos_1_18_0_vipuuser_proto_enumTypes[0].Descriptor()
}

func (IpuLinkRoutingType) Type() protoreflect.EnumType {
	return &file_vipu_protos_1_18_0_vipuuser_proto_enumTypes[0]
}

func (x IpuLinkRoutingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpuLinkRoutingType.Descriptor instead.
func (IpuLinkRoutingType) EnumDescriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{0}
}

type GatewayRoutingType int32

const (
	GatewayRoutingType_GRT_UNDEFINED GatewayRoutingType = 0
	// RING - Routing for GW Clusters with loop links enabled
	GatewayRoutingType_GRT_RING GatewayRoutingType = 2
	// SWRING - Routing for GW Clusters with switched GW links
	GatewayRoutingType_GRT_SWRING GatewayRoutingType = 3
)

// Enum value maps for GatewayRoutingType.
var (
	GatewayRoutingType_name = map[int32]string{
		0: "GRT_UNDEFINED",
		2: "GRT_RING",
		3: "GRT_SWRING",
	}
	GatewayRoutingType_value = map[string]int32{
		"GRT_UNDEFINED": 0,
		"GRT_RING":      2,
		"GRT_SWRING":    3,
	}
)

func (x GatewayRoutingType) Enum() *GatewayRoutingType {
	p := new(GatewayRoutingType)
	*p = x
	return p
}

func (x GatewayRoutingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayRoutingType) Descriptor() protoreflect.EnumDescriptor {
	return file_vipu_protos_1_18_0_vipuuser_proto_enumTypes[1].Descriptor()
}

func (GatewayRoutingType) Type() protoreflect.EnumType {
	return &file_vipu_protos_1_18_0_vipuuser_proto_enumTypes[1]
}

func (x GatewayRoutingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayRoutingType.Descriptor instead.
func (GatewayRoutingType) EnumDescriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{1}
}

// Types of sync configuration which can be applied globally to a partition.
type SyncType int32

const (
	SyncType_ST_UNDEFINED SyncType = 0
	// Default global sync configuration
	SyncType_ST_GS2_DEFAULT SyncType = 1
	// Independent rails sync configuration - unsupported configuration
	SyncType_ST_GS2_INDEPENDENT_RAILS SyncType = 2
	// POD Native default sync configuration
	SyncType_ST_POD_NATIVE_DEFAULT SyncType = 3
	// POD Native replicated pipeline sync configuration
	SyncType_ST_POD_NATIVE_REPLICATED_PIPELINE SyncType = 4
)

// Enum value maps for SyncType.
var (
	SyncType_name = map[int32]string{
		0: "ST_UNDEFINED",
		1: "ST_GS2_DEFAULT",
		2: "ST_GS2_INDEPENDENT_RAILS",
		3: "ST_POD_NATIVE_DEFAULT",
		4: "ST_POD_NATIVE_REPLICATED_PIPELINE",
	}
	SyncType_value = map[string]int32{
		"ST_UNDEFINED":                      0,
		"ST_GS2_DEFAULT":                    1,
		"ST_GS2_INDEPENDENT_RAILS":          2,
		"ST_POD_NATIVE_DEFAULT":             3,
		"ST_POD_NATIVE_REPLICATED_PIPELINE": 4,
	}
)

func (x SyncType) Enum() *SyncType {
	p := new(SyncType)
	*p = x
	return p
}

func (x SyncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncType) Descriptor() protoreflect.EnumDescriptor {
	return file_vipu_protos_1_18_0_vipuuser_proto_enumTypes[2].Descriptor()
}

func (SyncType) Type() protoreflect.EnumType {
	return &file_vipu_protos_1_18_0_vipuuser_proto_enumTypes[2]
}

func (x SyncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncType.Descriptor instead.
func (SyncType) EnumDescriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{2}
}

type PartitionReadyState int32

const (
	PartitionReadyState_PS_UNDEFINED PartitionReadyState = 0
	PartitionReadyState_PS_PENDING   PartitionReadyState = 1
	PartitionReadyState_PS_ACTIVE    PartitionReadyState = 2
	PartitionReadyState_PS_REMOVED   PartitionReadyState = 3
	PartitionReadyState_PS_ERROR     PartitionReadyState = 4
)

// Enum value maps for PartitionReadyState.
var (
	PartitionReadyState_name = map[int32]string{
		0: "PS_UNDEFINED",
		1: "PS_PENDING",
		2: "PS_ACTIVE",
		3: "PS_REMOVED",
		4: "PS_ERROR",
	}
	PartitionReadyState_value = map[string]int32{
		"PS_UNDEFINED": 0,
		"PS_PENDING":   1,
		"PS_ACTIVE":    2,
		"PS_REMOVED":   3,
		"PS_ERROR":     4,
	}
)

func (x PartitionReadyState) Enum() *PartitionReadyState {
	p := new(PartitionReadyState)
	*p = x
	return p
}

func (x PartitionReadyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionReadyState) Descriptor() protoreflect.EnumDescriptor {
	return file_vipu_protos_1_18_0_vipuuser_proto_enumTypes[3].Descriptor()
}

func (PartitionReadyState) Type() protoreflect.EnumType {
	return &file_vipu_protos_1_18_0_vipuuser_proto_enumTypes[3]
}

func (x PartitionReadyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionReadyState.Descriptor instead.
func (PartitionReadyState) EnumDescriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{3}
}

type PartitionOperationState int32

const (
	PartitionOperationState_POS_UNDEFINED PartitionOperationState = 0
	PartitionOperationState_POS_IDLE      PartitionOperationState = 1
	PartitionOperationState_POS_CREATING  PartitionOperationState = 2
	PartitionOperationState_POS_REMOVING  PartitionOperationState = 3
	PartitionOperationState_POS_RESETTING PartitionOperationState = 4
	PartitionOperationState_POS_FAILED    PartitionOperationState = 5
)

// Enum value maps for PartitionOperationState.
var (
	PartitionOperationState_name = map[int32]string{
		0: "POS_UNDEFINED",
		1: "POS_IDLE",
		2: "POS_CREATING",
		3: "POS_REMOVING",
		4: "POS_RESETTING",
		5: "POS_FAILED",
	}
	PartitionOperationState_value = map[string]int32{
		"POS_UNDEFINED": 0,
		"POS_IDLE":      1,
		"POS_CREATING":  2,
		"POS_REMOVING":  3,
		"POS_RESETTING": 4,
		"POS_FAILED":    5,
	}
)

func (x PartitionOperationState) Enum() *PartitionOperationState {
	p := new(PartitionOperationState)
	*p = x
	return p
}

func (x PartitionOperationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionOperationState) Descriptor() protoreflect.EnumDescriptor {
	return file_vipu_protos_1_18_0_vipuuser_proto_enumTypes[4].Descriptor()
}

func (PartitionOperationState) Type() protoreflect.EnumType {
	return &file_vipu_protos_1_18_0_vipuuser_proto_enumTypes[4]
}

func (x PartitionOperationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionOperationState.Descriptor instead.
func (PartitionOperationState) EnumDescriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{4}
}

type PartitionIpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The physical identifier of the IpuLinkDomain in the cluster for this IPU
	IpulinkDomainTopologyId uint32 `protobuf:"varint,1,opt,name=ipulink_domain_topology_id,json=ipulinkDomainTopologyId,proto3" json:"ipulink_domain_topology_id,omitempty"`
	// The logical identifier of the IpuLinkDomain when in the partition.
	IpulinkDomainRoutingId uint32 `protobuf:"varint,2,opt,name=ipulink_domain_routing_id,json=ipulinkDomainRoutingId,proto3" json:"ipulink_domain_routing_id,omitempty"`
	// The physical identifier of the IPU in the IpuLinkDomain.
	TopologyId uint32 `protobuf:"varint,3,opt,name=topology_id,json=topologyId,proto3" json:"topology_id,omitempty"`
	// The logical identifier of the IPU when in the partition.
	RoutingId uint32 `protobuf:"varint,4,opt,name=routing_id,json=routingId,proto3" json:"routing_id,omitempty"`
}

func (x *PartitionIpu) Reset() {
	*x = PartitionIpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionIpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionIpu) ProtoMessage() {}

func (x *PartitionIpu) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionIpu.ProtoReflect.Descriptor instead.
func (*PartitionIpu) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{0}
}

func (x *PartitionIpu) GetIpulinkDomainTopologyId() uint32 {
	if x != nil {
		return x.IpulinkDomainTopologyId
	}
	return 0
}

func (x *PartitionIpu) GetIpulinkDomainRoutingId() uint32 {
	if x != nil {
		return x.IpulinkDomainRoutingId
	}
	return 0
}

func (x *PartitionIpu) GetTopologyId() uint32 {
	if x != nil {
		return x.TopologyId
	}
	return 0
}

func (x *PartitionIpu) GetRoutingId() uint32 {
	if x != nil {
		return x.RoutingId
	}
	return 0
}

type PartitionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster containing the IPUs to be partitioned.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The selection of IPUs from the cluster.
	Ipus []*PartitionIpu `protobuf:"bytes,2,rep,name=ipus,proto3" json:"ipus,omitempty"`
	// The routing method to use for the IPUs in an IpuLinkDomain.
	IpulinkRoutingType IpuLinkRoutingType `protobuf:"varint,3,opt,name=ipulink_routing_type,json=ipulinkRoutingType,proto3,enum=virmgrpc.IpuLinkRoutingType" json:"ipulink_routing_type,omitempty"`
	// The sync groupings to use for the inter-GCD sync group (GS2).
	SyncType SyncType `protobuf:"varint,4,opt,name=sync_type,json=syncType,proto3,enum=virmgrpc.SyncType" json:"sync_type,omitempty"`
	// The number of GCDs to divide the partition into.
	NumGcds uint32 `protobuf:"varint,5,opt,name=num_gcds,json=numGcds,proto3" json:"num_gcds,omitempty"`
	// The number of ipu link segments used from separate IpuLinkDomains in the
	// partition
	NumIpulinkSegments uint32 `protobuf:"varint,6,opt,name=num_ipulink_segments,json=numIpulinkSegments,proto3" json:"num_ipulink_segments,omitempty"`
	// Boolean to set the "Fabric Reconfigurable" IPUoF attribute
	Reconfigurable bool `protobuf:"varint,7,opt,name=reconfigurable,proto3" json:"reconfigurable,omitempty"`
	// Gateway Routing Type
	GwRoutingType GatewayRoutingType `protobuf:"varint,8,opt,name=gw_routing_type,json=gwRoutingType,proto3,enum=virmgrpc.GatewayRoutingType" json:"gw_routing_type,omitempty"`
	// Give the total number of replicas independently of the number of GCDs.
	NumReplicas uint32 `protobuf:"varint,9,opt,name=num_replicas,json=numReplicas,proto3" json:"num_replicas,omitempty"`
	// The allocation containing the IPUs to be partitioned.
	AllocationId string `protobuf:"bytes,10,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
}

func (x *PartitionSpec) Reset() {
	*x = PartitionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSpec) ProtoMessage() {}

func (x *PartitionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSpec.ProtoReflect.Descriptor instead.
func (*PartitionSpec) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{1}
}

func (x *PartitionSpec) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PartitionSpec) GetIpus() []*PartitionIpu {
	if x != nil {
		return x.Ipus
	}
	return nil
}

func (x *PartitionSpec) GetIpulinkRoutingType() IpuLinkRoutingType {
	if x != nil {
		return x.IpulinkRoutingType
	}
	return IpuLinkRoutingType_IRT_UNDEFINED
}

func (x *PartitionSpec) GetSyncType() SyncType {
	if x != nil {
		return x.SyncType
	}
	return SyncType_ST_UNDEFINED
}

func (x *PartitionSpec) GetNumGcds() uint32 {
	if x != nil {
		return x.NumGcds
	}
	return 0
}

func (x *PartitionSpec) GetNumIpulinkSegments() uint32 {
	if x != nil {
		return x.NumIpulinkSegments
	}
	return 0
}

func (x *PartitionSpec) GetReconfigurable() bool {
	if x != nil {
		return x.Reconfigurable
	}
	return false
}

func (x *PartitionSpec) GetGwRoutingType() GatewayRoutingType {
	if x != nil {
		return x.GwRoutingType
	}
	return GatewayRoutingType_GRT_UNDEFINED
}

func (x *PartitionSpec) GetNumReplicas() uint32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *PartitionSpec) GetAllocationId() string {
	if x != nil {
		return x.AllocationId
	}
	return ""
}

type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of the partition
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Partition Specification
	Spec *PartitionSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Partition State
	ReadyState PartitionReadyState `protobuf:"varint,3,opt,name=ready_state,json=readyState,proto3,enum=virmgrpc.PartitionReadyState" json:"ready_state,omitempty"`
	// Return the IPUoF server version
	IpuofServerVersion string `protobuf:"bytes,4,opt,name=ipuof_server_version,json=ipuofServerVersion,proto3" json:"ipuof_server_version,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{2}
}

func (x *Partition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Partition) GetSpec() *PartitionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Partition) GetReadyState() PartitionReadyState {
	if x != nil {
		return x.ReadyState
	}
	return PartitionReadyState_PS_UNDEFINED
}

func (x *Partition) GetIpuofServerVersion() string {
	if x != nil {
		return x.IpuofServerVersion
	}
	return ""
}

type ListPartitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [optional]
	// Only list partitions within the specific allocation
	// If not specified, list all partitions in all allocations that the user has
	// access to
	AllocationId string `protobuf:"bytes,1,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
}

func (x *ListPartitionsRequest) Reset() {
	*x = ListPartitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartitionsRequest) ProtoMessage() {}

func (x *ListPartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartitionsRequest.ProtoReflect.Descriptor instead.
func (*ListPartitionsRequest) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{3}
}

func (x *ListPartitionsRequest) GetAllocationId() string {
	if x != nil {
		return x.AllocationId
	}
	return ""
}

type ListPartitionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of configured partitions.
	Partitions []*Partition `protobuf:"bytes,1,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *ListPartitionsReply) Reset() {
	*x = ListPartitionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPartitionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartitionsReply) ProtoMessage() {}

func (x *ListPartitionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartitionsReply.ProtoReflect.Descriptor instead.
func (*ListPartitionsReply) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{4}
}

func (x *ListPartitionsReply) GetPartitions() []*Partition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type PartitionRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of the partition
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Partition size required
	Size uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// Specify specific cluster for the partition (optional)
	// If not specified, partition will be created in any available
	// cluster - deprecated. Use the allocation_id.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The routing method required for the IPUs in an IpuLinkDomain (optional)
	// If not specified, a default routing method will be selected based on the
	// partition size and the cluster topology.
	IpulinkRoutingType IpuLinkRoutingType `protobuf:"varint,4,opt,name=ipulink_routing_type,json=ipulinkRoutingType,proto3,enum=virmgrpc.IpuLinkRoutingType" json:"ipulink_routing_type,omitempty"`
	// The number of ipu link segments used from separate IpuLinkDomains in the
	// partition (optional)
	// If not specified single ipulink segment will be used.
	NumIpulinkSegments uint32 `protobuf:"varint,5,opt,name=num_ipulink_segments,json=numIpulinkSegments,proto3" json:"num_ipulink_segments,omitempty"`
	// The routing method required for the ipu link segments
	// (optional, Multi-ipulink-segement partitions only)
	// If not specified, default routing method will be selected based on the
	// inter-ipulink-domain topology
	GwRoutingType GatewayRoutingType `protobuf:"varint,6,opt,name=gw_routing_type,json=gwRoutingType,proto3,enum=virmgrpc.GatewayRoutingType" json:"gw_routing_type,omitempty"`
	// The sync groupings to use for the inter-GCD sync group (GS2) (optional)
	// If not specified, GST_DEFAULT will be used.
	SyncType SyncType `protobuf:"varint,7,opt,name=sync_type,json=syncType,proto3,enum=virmgrpc.SyncType" json:"sync_type,omitempty"`
	// The number of GCDs to divide the partition into (optional)
	// If not specified, single GCD will be assumed.
	NumGcds uint32 `protobuf:"varint,8,opt,name=num_gcds,json=numGcds,proto3" json:"num_gcds,omitempty"`
	// Boolean to set the "Fabric Reconfigurable" IPUoF attribute
	// (optional) If not specified, partition will be non-reconfigurable.
	Reconfigurable bool `protobuf:"varint,9,opt,name=reconfigurable,proto3" json:"reconfigurable,omitempty"`
	// The total number of replicas across all GCDs (optional)
	// If not specified, it is assumed that there is one replica per GCD, which
	// is equivalent to setting num_replicas == num_gcds.
	NumReplicas uint32 `protobuf:"varint,10,opt,name=num_replicas,json=numReplicas,proto3" json:"num_replicas,omitempty"`
	// Specify specific allocation for the partition (optional)
	// If not specified, partition will be created in any available
	// allocation
	AllocationId string `protobuf:"bytes,11,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
	// The selection of IPUs from a cluster.
	// When PartitionIpu requirement is specified, cluster_id must be provided.
	Ipus []*PartitionIpu `protobuf:"bytes,12,rep,name=ipus,proto3" json:"ipus,omitempty"`
}

func (x *PartitionRequirements) Reset() {
	*x = PartitionRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRequirements) ProtoMessage() {}

func (x *PartitionRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRequirements.ProtoReflect.Descriptor instead.
func (*PartitionRequirements) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{5}
}

func (x *PartitionRequirements) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PartitionRequirements) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PartitionRequirements) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PartitionRequirements) GetIpulinkRoutingType() IpuLinkRoutingType {
	if x != nil {
		return x.IpulinkRoutingType
	}
	return IpuLinkRoutingType_IRT_UNDEFINED
}

func (x *PartitionRequirements) GetNumIpulinkSegments() uint32 {
	if x != nil {
		return x.NumIpulinkSegments
	}
	return 0
}

func (x *PartitionRequirements) GetGwRoutingType() GatewayRoutingType {
	if x != nil {
		return x.GwRoutingType
	}
	return GatewayRoutingType_GRT_UNDEFINED
}

func (x *PartitionRequirements) GetSyncType() SyncType {
	if x != nil {
		return x.SyncType
	}
	return SyncType_ST_UNDEFINED
}

func (x *PartitionRequirements) GetNumGcds() uint32 {
	if x != nil {
		return x.NumGcds
	}
	return 0
}

func (x *PartitionRequirements) GetReconfigurable() bool {
	if x != nil {
		return x.Reconfigurable
	}
	return false
}

func (x *PartitionRequirements) GetNumReplicas() uint32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *PartitionRequirements) GetAllocationId() string {
	if x != nil {
		return x.AllocationId
	}
	return ""
}

func (x *PartitionRequirements) GetIpus() []*PartitionIpu {
	if x != nil {
		return x.Ipus
	}
	return nil
}

type CreatePartitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition requirements
	Requirements *PartitionRequirements `protobuf:"bytes,2,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Disable Auto-reset for the partition
	DisableAutoReset bool `protobuf:"varint,3,opt,name=disable_auto_reset,json=disableAutoReset,proto3" json:"disable_auto_reset,omitempty"`
	// If set to true, the V-IPU controller may consider reallocation of this
	// partition to a different set of IPUs on partition errors
	Relocatable bool `protobuf:"varint,5,opt,name=relocatable,proto3" json:"relocatable,omitempty"`
}

func (x *CreatePartitionRequest) Reset() {
	*x = CreatePartitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartitionRequest) ProtoMessage() {}

func (x *CreatePartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartitionRequest.ProtoReflect.Descriptor instead.
func (*CreatePartitionRequest) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePartitionRequest) GetRequirements() *PartitionRequirements {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *CreatePartitionRequest) GetDisableAutoReset() bool {
	if x != nil {
		return x.DisableAutoReset
	}
	return false
}

func (x *CreatePartitionRequest) GetRelocatable() bool {
	if x != nil {
		return x.Relocatable
	}
	return false
}

type IpuofDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IP address of the IPUoF endpoint.
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// The port number of the IPUoF endpoint.
	ServerPort uint32 `protobuf:"varint,2,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// The port number of the IPUoF rdma endpoint.
	RdmaPort uint32 `protobuf:"varint,3,opt,name=rdma_port,json=rdmaPort,proto3" json:"rdma_port,omitempty"`
	// The remote device number of the IPU.
	DeviceId uint32 `protobuf:"varint,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The IpuLink Segment id for the IPU.
	IpulinkSegmentId uint32 `protobuf:"varint,5,opt,name=ipulink_segment_id,json=ipulinkSegmentId,proto3" json:"ipulink_segment_id,omitempty"`
	// The routing id for the IPU
	RoutingId uint32 `protobuf:"varint,6,opt,name=routing_id,json=routingId,proto3" json:"routing_id,omitempty"`
	// The IPU architecture ID
	IpuArchId uint32 `protobuf:"varint,7,opt,name=ipu_arch_id,json=ipuArchId,proto3" json:"ipu_arch_id,omitempty"`
	// The IPU ID attribute in GCDA
	IpuId uint32 `protobuf:"varint,8,opt,name=ipu_id,json=ipuId,proto3" json:"ipu_id,omitempty"`
	// chip_id contains the silicon ID of the given IPU
	ChipId string `protobuf:"bytes,9,opt,name=chip_id,json=chipId,proto3" json:"chip_id,omitempty"`
	// gwsw_version contains the GWSW version of the IPUM where the
	// IpuofDevice is located to.
	GwswVersion string `protobuf:"bytes,10,opt,name=gwsw_version,json=gwswVersion,proto3" json:"gwsw_version,omitempty"`
	// ipum_sw_version contains the IPU-M SW version where the IpuofDevice is
	// located.
	IpumSwVersion string `protobuf:"bytes,11,opt,name=ipum_sw_version,json=ipumSwVersion,proto3" json:"ipum_sw_version,omitempty"`
}

func (x *IpuofDevice) Reset() {
	*x = IpuofDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpuofDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpuofDevice) ProtoMessage() {}

func (x *IpuofDevice) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpuofDevice.ProtoReflect.Descriptor instead.
func (*IpuofDevice) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{7}
}

func (x *IpuofDevice) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IpuofDevice) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *IpuofDevice) GetRdmaPort() uint32 {
	if x != nil {
		return x.RdmaPort
	}
	return 0
}

func (x *IpuofDevice) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *IpuofDevice) GetIpulinkSegmentId() uint32 {
	if x != nil {
		return x.IpulinkSegmentId
	}
	return 0
}

func (x *IpuofDevice) GetRoutingId() uint32 {
	if x != nil {
		return x.RoutingId
	}
	return 0
}

func (x *IpuofDevice) GetIpuArchId() uint32 {
	if x != nil {
		return x.IpuArchId
	}
	return 0
}

func (x *IpuofDevice) GetIpuId() uint32 {
	if x != nil {
		return x.IpuId
	}
	return 0
}

func (x *IpuofDevice) GetChipId() string {
	if x != nil {
		return x.ChipId
	}
	return ""
}

func (x *IpuofDevice) GetGwswVersion() string {
	if x != nil {
		return x.GwswVersion
	}
	return ""
}

func (x *IpuofDevice) GetIpumSwVersion() string {
	if x != nil {
		return x.IpumSwVersion
	}
	return ""
}

type PartitionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The routing method configured for the IPUs.
	IpulinkRoutingType IpuLinkRoutingType `protobuf:"varint,2,opt,name=ipulink_routing_type,json=ipulinkRoutingType,proto3,enum=virmgrpc.IpuLinkRoutingType" json:"ipulink_routing_type,omitempty"`
	// The sync groupings configured for the IPUs.
	SyncType SyncType `protobuf:"varint,3,opt,name=sync_type,json=syncType,proto3,enum=virmgrpc.SyncType" json:"sync_type,omitempty"`
	// Boolean to set the "Fabric Reconfigurable" IPUoF attribute
	Reconfigurable bool `protobuf:"varint,5,opt,name=reconfigurable,proto3" json:"reconfigurable,omitempty"`
	// Gateway Routing Type for multi-ipulink-segment partitions
	GwRoutingType GatewayRoutingType `protobuf:"varint,6,opt,name=gw_routing_type,json=gwRoutingType,proto3,enum=virmgrpc.GatewayRoutingType" json:"gw_routing_type,omitempty"`
	// The number of IpuLinkSegments
	NumIpulinkSegments uint32 `protobuf:"varint,7,opt,name=num_ipulink_segments,json=numIpulinkSegments,proto3" json:"num_ipulink_segments,omitempty"`
	// The GCD configurations for the partition.
	GcdConfigs []*PartitionConfig_Gcd `protobuf:"bytes,8,rep,name=gcd_configs,json=gcdConfigs,proto3" json:"gcd_configs,omitempty"`
	// The IPUoF server version associated with this partition
	IpuofServerVersion string `protobuf:"bytes,9,opt,name=ipuof_server_version,json=ipuofServerVersion,proto3" json:"ipuof_server_version,omitempty"`
}

func (x *PartitionConfig) Reset() {
	*x = PartitionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionConfig) ProtoMessage() {}

func (x *PartitionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionConfig.ProtoReflect.Descriptor instead.
func (*PartitionConfig) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{8}
}

func (x *PartitionConfig) GetIpulinkRoutingType() IpuLinkRoutingType {
	if x != nil {
		return x.IpulinkRoutingType
	}
	return IpuLinkRoutingType_IRT_UNDEFINED
}

func (x *PartitionConfig) GetSyncType() SyncType {
	if x != nil {
		return x.SyncType
	}
	return SyncType_ST_UNDEFINED
}

func (x *PartitionConfig) GetReconfigurable() bool {
	if x != nil {
		return x.Reconfigurable
	}
	return false
}

func (x *PartitionConfig) GetGwRoutingType() GatewayRoutingType {
	if x != nil {
		return x.GwRoutingType
	}
	return GatewayRoutingType_GRT_UNDEFINED
}

func (x *PartitionConfig) GetNumIpulinkSegments() uint32 {
	if x != nil {
		return x.NumIpulinkSegments
	}
	return 0
}

func (x *PartitionConfig) GetGcdConfigs() []*PartitionConfig_Gcd {
	if x != nil {
		return x.GcdConfigs
	}
	return nil
}

func (x *PartitionConfig) GetIpuofServerVersion() string {
	if x != nil {
		return x.IpuofServerVersion
	}
	return ""
}

type CreatePartitionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the created partition.
	PartitionId string `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (x *CreatePartitionReply) Reset() {
	*x = CreatePartitionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePartitionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePartitionReply) ProtoMessage() {}

func (x *CreatePartitionReply) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePartitionReply.ProtoReflect.Descriptor instead.
func (*CreatePartitionReply) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePartitionReply) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

type ResetPartitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the partition to reset.
	PartitionId string `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// If set to true, the V-IPU controller may consider reallocating of this
	// partition to a different set of IPUs on reset errors, overriding value
	// set during partition creation. If set to false, value set during the
	// partition creation will be used.
	Relocatable bool `protobuf:"varint,2,opt,name=relocatable,proto3" json:"relocatable,omitempty"`
}

func (x *ResetPartitionRequest) Reset() {
	*x = ResetPartitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPartitionRequest) ProtoMessage() {}

func (x *ResetPartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPartitionRequest.ProtoReflect.Descriptor instead.
func (*ResetPartitionRequest) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{10}
}

func (x *ResetPartitionRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *ResetPartitionRequest) GetRelocatable() bool {
	if x != nil {
		return x.Relocatable
	}
	return false
}

type ResetPartitionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetPartitionReply) Reset() {
	*x = ResetPartitionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPartitionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPartitionReply) ProtoMessage() {}

func (x *ResetPartitionReply) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPartitionReply.ProtoReflect.Descriptor instead.
func (*ResetPartitionReply) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{11}
}

type RemovePartitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the partition to reset.
	PartitionId string `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Force remove ignore errors while removing a partition
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *RemovePartitionRequest) Reset() {
	*x = RemovePartitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePartitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePartitionRequest) ProtoMessage() {}

func (x *RemovePartitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePartitionRequest.ProtoReflect.Descriptor instead.
func (*RemovePartitionRequest) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{12}
}

func (x *RemovePartitionRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *RemovePartitionRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RemovePartitionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePartitionReply) Reset() {
	*x = RemovePartitionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePartitionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePartitionReply) ProtoMessage() {}

func (x *RemovePartitionReply) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePartitionReply.ProtoReflect.Descriptor instead.
func (*RemovePartitionReply) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{13}
}

type GetPartitionIpuofConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of the Partition
	PartitionId string `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Gcd id
	GcdId *GetPartitionIpuofConfigRequest_GcdID `protobuf:"bytes,2,opt,name=gcd_id,json=gcdId,proto3" json:"gcd_id,omitempty"`
}

func (x *GetPartitionIpuofConfigRequest) Reset() {
	*x = GetPartitionIpuofConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartitionIpuofConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartitionIpuofConfigRequest) ProtoMessage() {}

func (x *GetPartitionIpuofConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartitionIpuofConfigRequest.ProtoReflect.Descriptor instead.
func (*GetPartitionIpuofConfigRequest) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{14}
}

func (x *GetPartitionIpuofConfigRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *GetPartitionIpuofConfigRequest) GetGcdId() *GetPartitionIpuofConfigRequest_GcdID {
	if x != nil {
		return x.GcdId
	}
	return nil
}

type GetPartitionIpuofConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPUoF configurations for the partition (each Gcd)
	IpuofConfig *PartitionConfig `protobuf:"bytes,1,opt,name=ipuof_config,json=ipuofConfig,proto3" json:"ipuof_config,omitempty"`
}

func (x *GetPartitionIpuofConfigReply) Reset() {
	*x = GetPartitionIpuofConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartitionIpuofConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartitionIpuofConfigReply) ProtoMessage() {}

func (x *GetPartitionIpuofConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartitionIpuofConfigReply.ProtoReflect.Descriptor instead.
func (*GetPartitionIpuofConfigReply) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{15}
}

func (x *GetPartitionIpuofConfigReply) GetIpuofConfig() *PartitionConfig {
	if x != nil {
		return x.IpuofConfig
	}
	return nil
}

type PartitionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId         string                  `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	ReadyState          PartitionReadyState     `protobuf:"varint,2,opt,name=ready_state,json=readyState,proto3,enum=virmgrpc.PartitionReadyState" json:"ready_state,omitempty"`
	OperationState      PartitionOperationState `protobuf:"varint,3,opt,name=operation_state,json=operationState,proto3,enum=virmgrpc.PartitionOperationState" json:"operation_state,omitempty"`
	Errors              []string                `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	MaxAutoResetRetries uint32                  `protobuf:"varint,5,opt,name=max_auto_reset_retries,json=maxAutoResetRetries,proto3" json:"max_auto_reset_retries,omitempty"`
	AutoResetRetryCount uint32                  `protobuf:"varint,6,opt,name=auto_reset_retry_count,json=autoResetRetryCount,proto3" json:"auto_reset_retry_count,omitempty"`
	LastAutoResetTime   *timestamppb.Timestamp  `protobuf:"bytes,7,opt,name=last_auto_reset_time,json=lastAutoResetTime,proto3" json:"last_auto_reset_time,omitempty"`
}

func (x *PartitionStatus) Reset() {
	*x = PartitionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionStatus) ProtoMessage() {}

func (x *PartitionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionStatus.ProtoReflect.Descriptor instead.
func (*PartitionStatus) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{16}
}

func (x *PartitionStatus) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *PartitionStatus) GetReadyState() PartitionReadyState {
	if x != nil {
		return x.ReadyState
	}
	return PartitionReadyState_PS_UNDEFINED
}

func (x *PartitionStatus) GetOperationState() PartitionOperationState {
	if x != nil {
		return x.OperationState
	}
	return PartitionOperationState_POS_UNDEFINED
}

func (x *PartitionStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *PartitionStatus) GetMaxAutoResetRetries() uint32 {
	if x != nil {
		return x.MaxAutoResetRetries
	}
	return 0
}

func (x *PartitionStatus) GetAutoResetRetryCount() uint32 {
	if x != nil {
		return x.AutoResetRetryCount
	}
	return 0
}

func (x *PartitionStatus) GetLastAutoResetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAutoResetTime
	}
	return nil
}

type GetPartitionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the partition
	PartitionId string `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (x *GetPartitionStatusRequest) Reset() {
	*x = GetPartitionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartitionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartitionStatusRequest) ProtoMessage() {}

func (x *GetPartitionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartitionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetPartitionStatusRequest) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{17}
}

func (x *GetPartitionStatusRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

type GetPartitionStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *PartitionStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetPartitionStatusReply) Reset() {
	*x = GetPartitionStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartitionStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartitionStatusReply) ProtoMessage() {}

func (x *GetPartitionStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartitionStatusReply.ProtoReflect.Descriptor instead.
func (*GetPartitionStatusReply) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{18}
}

func (x *GetPartitionStatusReply) GetStatus() *PartitionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AllocationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster containing the allocation.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The agents in the allocation.
	AgentIds []string `protobuf:"bytes,2,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
}

func (x *AllocationSpec) Reset() {
	*x = AllocationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationSpec) ProtoMessage() {}

func (x *AllocationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationSpec.ProtoReflect.Descriptor instead.
func (*AllocationSpec) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{19}
}

func (x *AllocationSpec) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AllocationSpec) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

type Allocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the allocation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Allocation specification.
	Spec *AllocationSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *Allocation) Reset() {
	*x = Allocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation) ProtoMessage() {}

func (x *Allocation) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation.ProtoReflect.Descriptor instead.
func (*Allocation) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{20}
}

func (x *Allocation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Allocation) GetSpec() *AllocationSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ListIPUAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter to only fetch attributes from certain agents
	Agents []string `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (x *ListIPUAttributesRequest) Reset() {
	*x = ListIPUAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIPUAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIPUAttributesRequest) ProtoMessage() {}

func (x *ListIPUAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIPUAttributesRequest.ProtoReflect.Descriptor instead.
func (*ListIPUAttributesRequest) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{21}
}

func (x *ListIPUAttributesRequest) GetAgents() []string {
	if x != nil {
		return x.Agents
	}
	return nil
}

type ListIPUAttributesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ListIPUAttributesReply_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ListIPUAttributesReply) Reset() {
	*x = ListIPUAttributesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIPUAttributesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIPUAttributesReply) ProtoMessage() {}

func (x *ListIPUAttributesReply) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIPUAttributesReply.ProtoReflect.Descriptor instead.
func (*ListIPUAttributesReply) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{22}
}

func (x *ListIPUAttributesReply) GetEntries() []*ListIPUAttributesReply_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type PartitionConfig_Gcd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IPU devices in the GCD.
	Devices []*IpuofDevice `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
	// Arbitrary attributes as key-value pairs.
	Attributes map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartitionConfig_Gcd) Reset() {
	*x = PartitionConfig_Gcd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionConfig_Gcd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionConfig_Gcd) ProtoMessage() {}

func (x *PartitionConfig_Gcd) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionConfig_Gcd.ProtoReflect.Descriptor instead.
func (*PartitionConfig_Gcd) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PartitionConfig_Gcd) GetDevices() []*IpuofDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *PartitionConfig_Gcd) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type GetPartitionIpuofConfigRequest_GcdID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPartitionIpuofConfigRequest_GcdID) Reset() {
	*x = GetPartitionIpuofConfigRequest_GcdID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartitionIpuofConfigRequest_GcdID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartitionIpuofConfigRequest_GcdID) ProtoMessage() {}

func (x *GetPartitionIpuofConfigRequest_GcdID) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartitionIpuofConfigRequest_GcdID.ProtoReflect.Descriptor instead.
func (*GetPartitionIpuofConfigRequest_GcdID) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetPartitionIpuofConfigRequest_GcdID) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListIPUAttributesReply_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent string `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	// The uint32 map key represents IpuHwID
	IpuAttributes map[uint32]*ListIPUAttributesReply_Entry_Attributes `protobuf:"bytes,2,rep,name=ipu_attributes,json=ipuAttributes,proto3" json:"ipu_attributes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListIPUAttributesReply_Entry) Reset() {
	*x = ListIPUAttributesReply_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIPUAttributesReply_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIPUAttributesReply_Entry) ProtoMessage() {}

func (x *ListIPUAttributesReply_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIPUAttributesReply_Entry.ProtoReflect.Descriptor instead.
func (*ListIPUAttributesReply_Entry) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ListIPUAttributesReply_Entry) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *ListIPUAttributesReply_Entry) GetIpuAttributes() map[uint32]*ListIPUAttributesReply_Entry_Attributes {
	if x != nil {
		return x.IpuAttributes
	}
	return nil
}

type ListIPUAttributesReply_Entry_Attributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes map[string]string `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListIPUAttributesReply_Entry_Attributes) Reset() {
	*x = ListIPUAttributesReply_Entry_Attributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIPUAttributesReply_Entry_Attributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIPUAttributesReply_Entry_Attributes) ProtoMessage() {}

func (x *ListIPUAttributesReply_Entry_Attributes) ProtoReflect() protoreflect.Message {
	mi := &file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIPUAttributesReply_Entry_Attributes.ProtoReflect.Descriptor instead.
func (*ListIPUAttributesReply_Entry_Attributes) Descriptor() ([]byte, []int) {
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP(), []int{22, 0, 0}
}

func (x *ListIPUAttributesReply_Entry_Attributes) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_vipu_protos_1_18_0_vipuuser_proto protoreflect.FileDescriptor

var file_vipu_protos_1_18_0_vipuuser_proto_rawDesc = []byte{
	0x0a, 0x21, 0x76, 0x69, 0x70, 0x75, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2d, 0x31, 0x2e,
	0x31, 0x38, 0x2e, 0x30, 0x2f, 0x76, 0x69, 0x70, 0x75, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6,
	0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x75, 0x12,
	0x3b, 0x0a, 0x1a, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19,
	0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0xde, 0x03, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x70, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x75, 0x52, 0x04,
	0x69, 0x70, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x14, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x70,
	0x75, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x12, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x63, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x47, 0x63, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6e, 0x75, 0x6d, 0x49, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x67, 0x77,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x67, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x70, 0x75, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x69, 0x70, 0x75, 0x6f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x8a, 0x04, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x14,
	0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x72,
	0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x70, 0x75, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e,
	0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x49,
	0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44,
	0x0a, 0x0f, 0x67, 0x77, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x67, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x63, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x47, 0x63, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x04, 0x69, 0x70, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x70, 0x75, 0x52, 0x04, 0x69, 0x70, 0x75, 0x73, 0x22, 0xad, 0x01, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xe0, 0x02, 0x0a,
	0x0b, 0x49, 0x70, 0x75, 0x6f, 0x66, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x64, 0x6d, 0x61, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x72, 0x64, 0x6d, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x75, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x70, 0x75, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x70, 0x75, 0x41, 0x72,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x70, 0x75, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68,
	0x69, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x77, 0x73, 0x77, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x77, 0x73, 0x77,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x70, 0x75, 0x6d, 0x5f,
	0x73, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x70, 0x75, 0x6d, 0x53, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xeb, 0x04, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x14, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x70, 0x75,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x12, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0f,
	0x67, 0x77, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x67, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x70, 0x75, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6e, 0x75, 0x6d, 0x49, 0x70, 0x75, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x67, 0x63, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x72, 0x6d,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x63, 0x64, 0x52, 0x0a, 0x67, 0x63, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x70, 0x75, 0x6f, 0x66, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x69, 0x70, 0x75, 0x6f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xc4, 0x01, 0x0a, 0x03, 0x47, 0x63, 0x64, 0x12, 0x2f,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x70, 0x75, 0x6f, 0x66,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x4d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47,
	0x63, 0x64, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x51, 0x0a,
	0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x75, 0x6f, 0x66, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x06, 0x67, 0x63, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x75, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x63, 0x64, 0x49, 0x44, 0x52, 0x05,
	0x67, 0x63, 0x64, 0x49, 0x64, 0x1a, 0x17, 0x0a, 0x05, 0x47, 0x63, 0x64, 0x49, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70,
	0x75, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c,
	0x0a, 0x0c, 0x69, 0x70, 0x75, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0b, 0x69, 0x70, 0x75, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8f, 0x03, 0x0a,
	0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76,
	0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4b, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3e,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4c,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x69, 0x72, 0x6d,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x0e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x0a, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x32, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x50,
	0x55, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x82, 0x04, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x50, 0x55, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x50, 0x55, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xa5, 0x03, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x0e, 0x69, 0x70, 0x75, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x50, 0x55, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x70, 0x75, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x70, 0x75, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xae, 0x01, 0x0a, 0x0a, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x76,
	0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x50, 0x55, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x12, 0x49, 0x70,
	0x75, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x50, 0x55, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0x62, 0x0a, 0x12, 0x49, 0x70, 0x75, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x52, 0x54, 0x5f,
	0x44, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x52, 0x54, 0x5f, 0x53, 0x57, 0x4e,
	0x43, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x52, 0x54, 0x5f, 0x42, 0x54, 0x4e, 0x43, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x52, 0x54, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x53, 0x57, 0x4e,
	0x43, 0x10, 0x04, 0x2a, 0x45, 0x0a, 0x12, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x54,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x47, 0x52, 0x54, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52,
	0x54, 0x5f, 0x53, 0x57, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x90, 0x01, 0x0a, 0x08, 0x53,
	0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x5f,
	0x47, 0x53, 0x32, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x54, 0x5f, 0x47, 0x53, 0x32, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x54, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x44,
	0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0x64, 0x0a,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x53, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x04, 0x2a, 0x81, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x32, 0x8f, 0x05, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x76, 0x69, 0x72, 0x6d,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x69, 0x72,
	0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x50, 0x55, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x22, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x50, 0x55, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x50, 0x55, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x76, 0x69,
	0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x69, 0x72, 0x6d,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x75, 0x6f, 0x66, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x75,
	0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x75, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x69, 0x72, 0x6d, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vipu_protos_1_18_0_vipuuser_proto_rawDescOnce sync.Once
	file_vipu_protos_1_18_0_vipuuser_proto_rawDescData = file_vipu_protos_1_18_0_vipuuser_proto_rawDesc
)

func file_vipu_protos_1_18_0_vipuuser_proto_rawDescGZIP() []byte {
	file_vipu_protos_1_18_0_vipuuser_proto_rawDescOnce.Do(func() {
		file_vipu_protos_1_18_0_vipuuser_proto_rawDescData = protoimpl.X.CompressGZIP(file_vipu_protos_1_18_0_vipuuser_proto_rawDescData)
	})
	return file_vipu_protos_1_18_0_vipuuser_proto_rawDescData
}

var file_vipu_protos_1_18_0_vipuuser_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_vipu_protos_1_18_0_vipuuser_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_vipu_protos_1_18_0_vipuuser_proto_goTypes = []interface{}{
	(IpuLinkRoutingType)(0),                         // 0: virmgrpc.IpuLinkRoutingType
	(GatewayRoutingType)(0),                         // 1: virmgrpc.GatewayRoutingType
	(SyncType)(0),                                   // 2: virmgrpc.SyncType
	(PartitionReadyState)(0),                        // 3: virmgrpc.PartitionReadyState
	(PartitionOperationState)(0),                    // 4: virmgrpc.PartitionOperationState
	(*PartitionIpu)(nil),                            // 5: virmgrpc.PartitionIpu
	(*PartitionSpec)(nil),                           // 6: virmgrpc.PartitionSpec
	(*Partition)(nil),                               // 7: virmgrpc.Partition
	(*ListPartitionsRequest)(nil),                   // 8: virmgrpc.ListPartitionsRequest
	(*ListPartitionsReply)(nil),                     // 9: virmgrpc.ListPartitionsReply
	(*PartitionRequirements)(nil),                   // 10: virmgrpc.PartitionRequirements
	(*CreatePartitionRequest)(nil),                  // 11: virmgrpc.CreatePartitionRequest
	(*IpuofDevice)(nil),                             // 12: virmgrpc.IpuofDevice
	(*PartitionConfig)(nil),                         // 13: virmgrpc.PartitionConfig
	(*CreatePartitionReply)(nil),                    // 14: virmgrpc.CreatePartitionReply
	(*ResetPartitionRequest)(nil),                   // 15: virmgrpc.ResetPartitionRequest
	(*ResetPartitionReply)(nil),                     // 16: virmgrpc.ResetPartitionReply
	(*RemovePartitionRequest)(nil),                  // 17: virmgrpc.RemovePartitionRequest
	(*RemovePartitionReply)(nil),                    // 18: virmgrpc.RemovePartitionReply
	(*GetPartitionIpuofConfigRequest)(nil),          // 19: virmgrpc.GetPartitionIpuofConfigRequest
	(*GetPartitionIpuofConfigReply)(nil),            // 20: virmgrpc.GetPartitionIpuofConfigReply
	(*PartitionStatus)(nil),                         // 21: virmgrpc.PartitionStatus
	(*GetPartitionStatusRequest)(nil),               // 22: virmgrpc.GetPartitionStatusRequest
	(*GetPartitionStatusReply)(nil),                 // 23: virmgrpc.GetPartitionStatusReply
	(*AllocationSpec)(nil),                          // 24: virmgrpc.AllocationSpec
	(*Allocation)(nil),                              // 25: virmgrpc.Allocation
	(*ListIPUAttributesRequest)(nil),                // 26: virmgrpc.ListIPUAttributesRequest
	(*ListIPUAttributesReply)(nil),                  // 27: virmgrpc.ListIPUAttributesReply
	(*PartitionConfig_Gcd)(nil),                     // 28: virmgrpc.PartitionConfig.Gcd
	nil,                                             // 29: virmgrpc.PartitionConfig.Gcd.AttributesEntry
	(*GetPartitionIpuofConfigRequest_GcdID)(nil),    // 30: virmgrpc.GetPartitionIpuofConfigRequest.GcdID
	(*ListIPUAttributesReply_Entry)(nil),            // 31: virmgrpc.ListIPUAttributesReply.Entry
	(*ListIPUAttributesReply_Entry_Attributes)(nil), // 32: virmgrpc.ListIPUAttributesReply.Entry.Attributes
	nil,                           // 33: virmgrpc.ListIPUAttributesReply.Entry.IpuAttributesEntry
	nil,                           // 34: virmgrpc.ListIPUAttributesReply.Entry.Attributes.AttributesEntry
	(*timestamppb.Timestamp)(nil), // 35: google.protobuf.Timestamp
}
var file_vipu_protos_1_18_0_vipuuser_proto_depIdxs = []int32{
	5,  // 0: virmgrpc.PartitionSpec.ipus:type_name -> virmgrpc.PartitionIpu
	0,  // 1: virmgrpc.PartitionSpec.ipulink_routing_type:type_name -> virmgrpc.IpuLinkRoutingType
	2,  // 2: virmgrpc.PartitionSpec.sync_type:type_name -> virmgrpc.SyncType
	1,  // 3: virmgrpc.PartitionSpec.gw_routing_type:type_name -> virmgrpc.GatewayRoutingType
	6,  // 4: virmgrpc.Partition.spec:type_name -> virmgrpc.PartitionSpec
	3,  // 5: virmgrpc.Partition.ready_state:type_name -> virmgrpc.PartitionReadyState
	7,  // 6: virmgrpc.ListPartitionsReply.partitions:type_name -> virmgrpc.Partition
	0,  // 7: virmgrpc.PartitionRequirements.ipulink_routing_type:type_name -> virmgrpc.IpuLinkRoutingType
	1,  // 8: virmgrpc.PartitionRequirements.gw_routing_type:type_name -> virmgrpc.GatewayRoutingType
	2,  // 9: virmgrpc.PartitionRequirements.sync_type:type_name -> virmgrpc.SyncType
	5,  // 10: virmgrpc.PartitionRequirements.ipus:type_name -> virmgrpc.PartitionIpu
	10, // 11: virmgrpc.CreatePartitionRequest.requirements:type_name -> virmgrpc.PartitionRequirements
	0,  // 12: virmgrpc.PartitionConfig.ipulink_routing_type:type_name -> virmgrpc.IpuLinkRoutingType
	2,  // 13: virmgrpc.PartitionConfig.sync_type:type_name -> virmgrpc.SyncType
	1,  // 14: virmgrpc.PartitionConfig.gw_routing_type:type_name -> virmgrpc.GatewayRoutingType
	28, // 15: virmgrpc.PartitionConfig.gcd_configs:type_name -> virmgrpc.PartitionConfig.Gcd
	30, // 16: virmgrpc.GetPartitionIpuofConfigRequest.gcd_id:type_name -> virmgrpc.GetPartitionIpuofConfigRequest.GcdID
	13, // 17: virmgrpc.GetPartitionIpuofConfigReply.ipuof_config:type_name -> virmgrpc.PartitionConfig
	3,  // 18: virmgrpc.PartitionStatus.ready_state:type_name -> virmgrpc.PartitionReadyState
	4,  // 19: virmgrpc.PartitionStatus.operation_state:type_name -> virmgrpc.PartitionOperationState
	35, // 20: virmgrpc.PartitionStatus.last_auto_reset_time:type_name -> google.protobuf.Timestamp
	21, // 21: virmgrpc.GetPartitionStatusReply.status:type_name -> virmgrpc.PartitionStatus
	24, // 22: virmgrpc.Allocation.spec:type_name -> virmgrpc.AllocationSpec
	31, // 23: virmgrpc.ListIPUAttributesReply.entries:type_name -> virmgrpc.ListIPUAttributesReply.Entry
	12, // 24: virmgrpc.PartitionConfig.Gcd.devices:type_name -> virmgrpc.IpuofDevice
	29, // 25: virmgrpc.PartitionConfig.Gcd.attributes:type_name -> virmgrpc.PartitionConfig.Gcd.AttributesEntry
	33, // 26: virmgrpc.ListIPUAttributesReply.Entry.ipu_attributes:type_name -> virmgrpc.ListIPUAttributesReply.Entry.IpuAttributesEntry
	34, // 27: virmgrpc.ListIPUAttributesReply.Entry.Attributes.attributes:type_name -> virmgrpc.ListIPUAttributesReply.Entry.Attributes.AttributesEntry
	32, // 28: virmgrpc.ListIPUAttributesReply.Entry.IpuAttributesEntry.value:type_name -> virmgrpc.ListIPUAttributesReply.Entry.Attributes
	8,  // 29: virmgrpc.UserService.ListPartitions:input_type -> virmgrpc.ListPartitionsRequest
	26, // 30: virmgrpc.UserService.ListIPUAttributes:input_type -> virmgrpc.ListIPUAttributesRequest
	11, // 31: virmgrpc.UserService.CreatePartition:input_type -> virmgrpc.CreatePartitionRequest
	17, // 32: virmgrpc.UserService.RemovePartition:input_type -> virmgrpc.RemovePartitionRequest
	15, // 33: virmgrpc.UserService.ResetPartition:input_type -> virmgrpc.ResetPartitionRequest
	19, // 34: virmgrpc.UserService.GetPartitionIpuofConfig:input_type -> virmgrpc.GetPartitionIpuofConfigRequest
	22, // 35: virmgrpc.UserService.GetPartitionStatus:input_type -> virmgrpc.GetPartitionStatusRequest
	9,  // 36: virmgrpc.UserService.ListPartitions:output_type -> virmgrpc.ListPartitionsReply
	27, // 37: virmgrpc.UserService.ListIPUAttributes:output_type -> virmgrpc.ListIPUAttributesReply
	14, // 38: virmgrpc.UserService.CreatePartition:output_type -> virmgrpc.CreatePartitionReply
	18, // 39: virmgrpc.UserService.RemovePartition:output_type -> virmgrpc.RemovePartitionReply
	16, // 40: virmgrpc.UserService.ResetPartition:output_type -> virmgrpc.ResetPartitionReply
	20, // 41: virmgrpc.UserService.GetPartitionIpuofConfig:output_type -> virmgrpc.GetPartitionIpuofConfigReply
	23, // 42: virmgrpc.UserService.GetPartitionStatus:output_type -> virmgrpc.GetPartitionStatusReply
	36, // [36:43] is the sub-list for method output_type
	29, // [29:36] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_vipu_protos_1_18_0_vipuuser_proto_init() }
func file_vipu_protos_1_18_0_vipuuser_proto_init() {
	if File_vipu_protos_1_18_0_vipuuser_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionIpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPartitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPartitionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePartitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpuofDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePartitionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPartitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPartitionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePartitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePartitionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartitionIpuofConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartitionIpuofConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartitionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartitionStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Allocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIPUAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIPUAttributesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionConfig_Gcd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartitionIpuofConfigRequest_GcdID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIPUAttributesReply_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipu_protos_1_18_0_vipuuser_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIPUAttributesReply_Entry_Attributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vipu_protos_1_18_0_vipuuser_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vipu_protos_1_18_0_vipuuser_proto_goTypes,
		DependencyIndexes: file_vipu_protos_1_18_0_vipuuser_proto_depIdxs,
		EnumInfos:         file_vipu_protos_1_18_0_vipuuser_proto_enumTypes,
		MessageInfos:      file_vipu_protos_1_18_0_vipuuser_proto_msgTypes,
	}.Build()
	File_vipu_protos_1_18_0_vipuuser_proto = out.File
	file_vipu_protos_1_18_0_vipuuser_proto_rawDesc = nil
	file_vipu_protos_1_18_0_vipuuser_proto_goTypes = nil
	file_vipu_protos_1_18_0_vipuuser_proto_depIdxs = nil
}
